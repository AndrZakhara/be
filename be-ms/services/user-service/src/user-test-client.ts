/* eslint-disable @typescript-eslint/no-explicit-any */
// This is a test client for the gRPC User Service.
// It demonstrates how to call all available methods and handle errors.
import * as grpc from "@grpc/grpc-js";
import * as protoLoader from "@grpc/proto-loader";
import {
  UserServiceClient,
  CreateUserRequest,
  GetUserRequest,
  UpdateUserRequest,
  DeleteUserRequest,
  UserResponse,
  DeleteUserResponse,
  User as UserGrpc,
  CreateUserPayload,
} from "./grpc/generated/user";

const packageDefinition = protoLoader.loadSync("./src/grpc/proto/user.proto", {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
});
const userProto = grpc.loadPackageDefinition(packageDefinition);
const UserService = (userProto.user as any).UserService;

const client: UserServiceClient = new UserService(
  "localhost:50053",
  grpc.credentials.createInsecure()
);

function callService(
  method: string,
  request: any,
  callback: (error: any, response: any) => void
) {
  (client as Record<string, any>)[method](request, callback);
}

// Global variable to store the created user's ID for subsequent tests
let createdUserId: string;

// -----------------------------------------------------------
// Test for createUser method (Successful creation with ID from 'axs model')
// -----------------------------------------------------------
// The 'id' and 'fullName' fields should not be sent in the request
// as they are generated by the server.
const newUserPayload: CreateUserPayload = {
  // We'll use a hardcoded ID for testing purposes, assuming it's from the 'axs model'
  userId: "axs-user-12345",
  username: "testuser",
  email: "testuser@example.com",
  firstName: "Test",
  lastName: "User",
  phone: "1234567890",
  role: "customer",
  avatarUrl: "https://example.com/avatar.jpg",
};
const createUserRequest: CreateUserRequest = { user: newUserPayload };

console.log("--- Testing createUser (Successful creation) ---");

callService(
  "createUser",
  createUserRequest,
  (error: any, response: UserResponse) => {
    if (error) {
      console.error(
        `Error creating user: ${error.details} (Code: ${error.code})`
      );
    } else {
      console.log("User created successfully:", response.user);
      createdUserId = response.user!.id; // Store the ID for later
      console.log(`Stored created user ID: ${createdUserId}`);

      // Chaining the next test call to ensure creation is complete
      testGetUserById();
    }
  }
);

// -----------------------------------------------------------
// Chained Test Functions
// We chain the tests to ensure they run in a logical sequence
// (create -> get -> update -> delete)
// -----------------------------------------------------------

function testGetUserById() {
  // -----------------------------------------------------------
  // Test for getUserById method (Successful retrieval)
  // -----------------------------------------------------------
  const getUserRequest: GetUserRequest = { id: createdUserId };

  console.log(
    `\n--- Testing getUserById (Successful retrieval for ID: ${createdUserId}) ---`
  );

  callService(
    "getUserById",
    getUserRequest,
    (error: any, response: UserResponse) => {
      if (error) {
        console.error(
          `Error getting user: ${error.details} (Code: ${error.code})`
        );
      } else {
        console.log("Found user:", response.user);
        testUpdateUser();
      }
    }
  );
}

function testUpdateUser() {
  // -----------------------------------------------------------
  // Test for updateUser method (Successful update)
  // -----------------------------------------------------------
  // The 'id' and 'fullName' fields should not be sent in the request
  // as they are generated by the server.
  const updatedUserPayload: UserGrpc = {
    ...newUserPayload,
    phone: "0987654321",
    avatarUrl: "http://example.com/avatar/updated-testuser.jpg",
    fullName: "",
    id: "",
  };
  const updateUserRequest: UpdateUserRequest = {
    id: createdUserId,
    user: updatedUserPayload,
  };

  console.log(
    `\n--- Testing updateUser (Successful update for ID: ${createdUserId}) ---`
  );

  callService(
    "updateUser",
    updateUserRequest,
    (error: any, response: UserResponse) => {
      if (error) {
        console.error(
          `Error updating user: ${error.details} (Code: ${error.code})`
        );
      } else {
        console.log("User updated successfully:", response.user);
        testDeleteUser();
      }
    }
  );
}

function testDeleteUser() {
  // -----------------------------------------------------------
  // Test for deleteUser method (Successful deletion)
  // -----------------------------------------------------------
  const deleteUserRequest: DeleteUserRequest = { id: createdUserId };

  console.log(
    `\n--- Testing deleteUser (Successful deletion for ID: ${createdUserId}) ---`
  );

  callService(
    "deleteUser",
    deleteUserRequest,
    (error: any, response: DeleteUserResponse) => {
      if (error) {
        console.error(
          `Error deleting user: ${error.details} (Code: ${error.code})`
        );
      } else {
        console.log("Deletion successful:", response.message);
      }
      testInvalidCalls();
    }
  );
}

function testInvalidCalls() {
  // -----------------------------------------------------------
  // Test for getUserById method (Non-existent user - expect error)
  // -----------------------------------------------------------
  const getNonExistentUserRequest: GetUserRequest = { id: "non-existent-id" };

  console.log(
    "\n--- Testing getUserById (Non-existent user - expect error) ---"
  );

  callService(
    "getUserById",
    getNonExistentUserRequest,
    (error: any, response: UserResponse) => {
      if (error) {
        console.error(
          `Error as expected: ${error.details} (Code: ${error.code})`
        );
      } else {
        console.log("Unexpected success:", response);
      }
    }
  );

  // -----------------------------------------------------------
  // Test for createUser method (Missing user data - expect error)
  // -----------------------------------------------------------
  const createInvalidUserRequest: CreateUserRequest = {};

  console.log("\n--- Testing createUser (Missing data - expect error) ---");

  callService(
    "createUser",
    createInvalidUserRequest,
    (error: any, response: UserResponse) => {
      if (error) {
        console.error(
          `Error as expected: ${error.details} (Code: ${error.code})`
        );
      } else {
        console.log("Unexpected success:", response);
      }
    }
  );
}
