openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API for managing users with JWT authentication

servers:
  - url: http://localhost:5000
    description: Local server

tags:
  - name: Auth
    description: Authentication endpoints
  - name: User
    description: User management endpoints

paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  token:
                    type: string
                    example: "Bearer <jwt_token>"
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: User already exists
        "500":
          description: Internal server error

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "Bearer <jwt_token>"
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid email or password
        "500":
          description: Internal server error

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user (client-side token invalidation)
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        "500":
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "64d5f9c4b3c2e2a1d3f7e8b1"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phone:
          type: string
          example: "+1234567890"
        role:
          type: string
          example: "customer"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-08-24T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-08-24T12:00:00Z"

    UserInput:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
      required:
        - username
        - email
        - password
